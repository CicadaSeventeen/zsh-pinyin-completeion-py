import socket
import os
import signal
import sys
import completion as cmplt
import pickle
#DEBUG = 1
def cleanup(signum, frame=None):
    if signum == 2 or signum == 15:
        try:
            server.close()
        except:
            pass
        if os.path.exists(socket_path):
            os.unlink(socket_path)
        sys.exit(0)

def main():
    # 定义socket文件路径
    XDG_RUNTIME_DIR = os.environ.get("XDG_RUNTIME_DIR")
    SHELL_PID = os.getppid()
    global socket_path
    if 'DEBUG' in globals():
        socket_path = '/tmp/test'
    else:
        socket_path = XDG_RUNTIME_DIR + '/' + str(SHELL_PID)
    # 清理可能存在的旧socket文件
    if os.path.exists(socket_path):
        os.unlink(socket_path)
    # 创建Unix Domain Socket
    try:
        server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        server.bind(socket_path)
        server.listen(1)
        signal.signal(signal.SIGINT, cleanup)
        signal.signal(signal.SIGTERM, cleanup)
    except Exception as e:
        sys.stderr.write(f"Server Error: {e}")
        exit(1)
    while True:
        client, addr = server.accept()
    # 接收客户端数据
        # raw:pickle
        try:
            client_data_pickle = client.recv(65536)
            client_data_list = pickle.loads(client_data_pickle)
        except:
            pass
        env_old=dict(os.environ)
        try:
            os.environ.clear()
            os.environ.update(client_data_list[2])
        except:
            os.environ.update(env_old)
        #print(os.environ)
        #os.environ.update(dict(pickle.loads(tmp)))
        try:
            string_return = cmplt.main(target=client_data_list[0],path=client_data_list[1])
    # 向客户端发送数据
            server_data = string_return.encode()
            client.send(server_data)
            client.close()
        except:
            pass


if __name__ == "__main__":
    if sys.platform.startswith('linux'):
        import ctypes
        import ctypes.util
        libc = ctypes.CDLL(ctypes.util.find_library('c'))
        libc.prctl(1, signal.SIGTERM)
    main()
